
/*class StackTest
types -- paradigma funcional mais enum e struct sem fazer record
-- TODO Define types here
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
operations
-- TODO Define operations here
functions funcional
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end StackTest
*/

class StackTest
instance variables
s : Stack := new Stack(4);



operations
private assertTrue: bool ==> ()
assertTrue(cond) == return
pre cond;
private testPushPop: () ==> ()
testPushPop() ==
(
s.clear();
s.push(1);
s.push(2);
assertTrue(s.top() = 2);
s.pop();
assertTrue(s.top() = 1);
s.pop()
);
public static main: () ==> ()
main() ==
(
new StackTest().testPushPop();
);  

traces
-- test cases will be generated in all possible combinations
-- starting with a call of clear followed by one to four pushes of
-- values onto the stack
-- followed again by one to three pops from the stack.
PushBeforePop :
s.clear();
(let x in set {1,2} in s.push(x)){1,4};
s.pop(){1,3}

end StackTest